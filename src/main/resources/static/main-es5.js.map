{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/projects.component.ts","webpack:///src/app/components/projects.component.html","webpack:///src/app/resolvers/credentials.resolver.service.ts","webpack:///src/app/resolvers/projects.resolver.service.ts","webpack:///src/app/services/backend.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","routes","path","redirectTo","component","runGuardsAndResolvers","credentials","projects","AppModule","forRoot","onSameUrlNavigation","declarations","imports","providers","bootstrap","ProjectsComponent","router","route","modalService","backendService","data","subscribe","newCredentials","username","cannotSignInErrorVisible","updateCredentials","res","navigate","dismissAll","err","removeCredentials","content","open","ariaLabelledBy","result","reason","CredentialsResolverService","state","loadCredentials","pipe","ProjectsResolverService","loadProjects","p","status","BackendService","httpClient","get","put","password","environment","production","bootstrapModule","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n  title = 'memsource';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BackendService } from './services/backend.service';\nimport { CredentialsResolverService } from './resolvers/credentials.resolver.service';\nimport { ProjectsComponent } from './components/projects.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ProjectsResolverService } from './resolvers/projects.resolver.service';\n\n\nconst routes: Routes = [\n  {\n    path: '**',\n    redirectTo: 'projects'\n  },\n  {\n    path: 'projects',\n    component: ProjectsComponent,\n    runGuardsAndResolvers: 'always',\n    resolve: {\n      credentials: CredentialsResolverService,\n      projects: ProjectsResolverService\n    }\n  }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProjectsComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    NgbModule,\n    FormsModule,\n    RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })\n  ],\n  providers: [\n    BackendService,\n    CredentialsResolverService,\n    ProjectsResolverService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Credentials } from '../models/credentials';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { BackendService } from '../services/backend.service';\nimport { Project } from '../models/project';\n\n@Component({\n  selector: 'projects-page',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.less']\n})\nexport class ProjectsComponent implements OnInit {\n\n  cannotSignInErrorVisible: boolean;\n\n  projects: Project[];\n  credentials: Credentials;\n  newCredentials: Credentials;\n\n  constructor(private router: Router,\n              private route: ActivatedRoute,\n              private modalService: NgbModal,\n              private backendService: BackendService) {\n  }\n\n  ngOnInit(): void {\n    this.route.data.subscribe((data: { credentials: Credentials, projects: Project[] }) => {\n      this.credentials = data.credentials;\n      this.newCredentials = { username: this.credentials.username } as Credentials;\n      this.projects = data.projects;\n      this.cannotSignInErrorVisible = false;\n    });\n  }\n\n  isSignedIn(): boolean {\n    return !!this.credentials.username;\n  }\n\n  signInAs() {\n    this.backendService.updateCredentials(this.newCredentials).subscribe(res => {\n      this.router.navigate(['projects']);\n      this.modalService.dismissAll();\n    }, err => {\n      this.cannotSignInErrorVisible = true;\n    });\n  }\n\n  signOut() {\n    this.backendService.removeCredentials().subscribe(res => {\n      this.router.navigate(['projects']);\n    });\n  }\n\n  open(content) {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' }).result.then(\n      result => {\n      },\n      reason => {\n      }\n    );\n  }\n}\n","<nav class=\"navbar navbar-expand navbar-light bg-light\">\n  <a class=\"navbar-brand\">Memsource Projects</a>\n  <ul class=\"navbar-nav ml-auto\">\n    <li class=\"nav-item\" ngbDropdown>\n      <a class=\"nav-link\" style=\"cursor: pointer\" ngbDropdownToggle id=\"navbarDropdown2\" role=\"button\">\n        <span *ngIf=\"isSignedIn()\">{{credentials.username}}</span>\n        <span *ngIf=\"!isSignedIn()\">Sing in</span>\n      </a>\n      <div ngbDropdownMenu aria-labelledby=\"navbarDropdown2\" class=\"dropdown-menu dropdown-menu-right\">\n        <a role=\"button\" ngbDropdownItem (click)=\"open(content)\">Sign in as...</a>\n        <a *ngIf=\"isSignedIn()\" role=\"button\" ngbDropdownItem (click)=\"signOut()\">Sign out</a>\n      </div>\n    </li>\n  </ul>\n\n</nav>\n\n<ng-template #content let-modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" id=\"modal-basic-title\">Provide Memsource Credentials</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p *ngIf=\"cannotSignInErrorVisible\">\n      <ngb-alert type=\"danger\" [dismissible]=\"false\">Can't sign in using provided credentials</ngb-alert>\n    </p>\n    <form>\n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <div class=\"input-group\">\n          <input id=\"username\" [(ngModel)]=\"newCredentials.username\" class=\"form-control\" name=\"username\">\n        </div>\n\n        <label for=\"password\">Password</label>\n        <div class=\"input-group\">\n          <input id=\"password\" [(ngModel)]=\"newCredentials.password\" type=\"password\" class=\"form-control\"\n                 name=\"password\">\n        </div>\n      </div>\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"signInAs()\">Sign in</button>\n  </div>\n</ng-template>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\"></div>\n    <div *ngIf=isSignedIn() class=\"col-lg-8 projects-container\">\n      <ng-container *ngFor=\"let proj of projects\">\n        <div class=\"project-container\">\n          <h3 class=\"project-container__title\">{{proj.name}}</h3><span>({{proj.status}})</span>\n          <div class=\"project-container__translations-info\"><span>Original language: </span> <b>{{proj.sourceLang}}</b>\n          </div>\n          <div class=\"project-container__translations-info\">\n            <span>Translations: </span>\n            <span *ngFor=\"let tl of proj.targetLangs; let isLast=last\">\n              <b>{{tl}}</b>{{isLast ? '' : ', '}}\n          </span>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <div *ngIf=\"isSignedIn() && projects.length == 0\" class=\"col-lg-12 info-container\">\n      <p>No projects for this account</p>\n    </div>\n\n    <div *ngIf=\"!isSignedIn()\" class=\"col-lg-12 info-container\">\n      <p>No valid credentials provided</p>\n    </div>\n    <div class=\"col\"></div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Credentials } from '../models/credentials';\nimport { BackendService } from '../services/backend.service';\nimport { catchError } from 'rxjs/operators';\n\n\n@Injectable()\nexport class CredentialsResolverService implements Resolve<Credentials> {\n  constructor(private backendService: BackendService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Credentials> {\n    return this.backendService.loadCredentials()\n      .pipe(catchError(err => {\n        return of({} as Credentials);\n      }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { BackendService } from '../services/backend.service';\nimport { Project } from '../models/project';\nimport { catchError, map } from 'rxjs/operators';\n\n\n@Injectable()\nexport class ProjectsResolverService implements Resolve<Project[]> {\n  constructor(private backendService: BackendService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Project[]> {\n    return this.backendService.loadProjects().pipe(map(p => p)).pipe(catchError(err => {\n      if (err.status == 401) {\n        return of([])\n      } else {\n        throw err;\n      }\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Credentials } from '../models/credentials';\nimport { Project } from '../models/project';\n\n@Injectable()\nexport class BackendService {\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loadCredentials(): Observable<Credentials> {\n    return this.httpClient.get<Credentials>('/api/credentials');\n  }\n\n  updateCredentials(credentials: Credentials): Observable<any> {\n    return this.httpClient.put('/api/credentials',\n      { username: credentials.username, password: credentials.password }\n    );\n  }\n\n  removeCredentials(): Observable<any> {\n    return this.httpClient.delete('/api/credentials');\n  }\n\n  loadProjects(): Observable<Project[]> {\n    return this.httpClient.get<Project[]>('/api/projects');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}